generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String  @id @default(uuid())
  email    String  @unique
  password String  @db.Text
  imageUrl String? @db.Text

  rooms        Room[]
  groups       Group[]
  members      Member[]
  ResetToken   ResetToken[]
  RefreshToken RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetToken {
  id         String  @id @default(uuid())
  profileId  String
  profile    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  resetToken String  @db.Text

  @@index([profileId])
}

model RefreshToken {
  id           String  @id @default(uuid())
  profileId    String
  profile      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  refreshToken String  @db.Text

  @@index([profileId])
}

enum RoomType {
  PUBLIC
  PRIVATE
  HIDDEN
}

model Room {
  id         String   @id @default(uuid())
  name       String
  type       RoomType @default(PUBLIC)
  password   String?  @db.Text
  imageUrl   String?  @db.Text
  inviteCode String   @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  groups  Group[]
  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, inviteCode])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([roomId])
}

enum GroupType {
  TEXT
  AUDIO
  VIDEO
}

model Group {
  id   String    @id @default(uuid())
  name String
  type GroupType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([roomId])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
